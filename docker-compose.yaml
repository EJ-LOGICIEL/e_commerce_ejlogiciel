services:
  # Backend services
  backend:
    profiles:
      - dev
    build:
      context: ./backend
    command: >
      sh -c "python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8001"
    volumes:
      - ./backend:/app
      - backend_logs:/app/logs
    env_file:
      - ./backend/.env
    environment:
      - DEBUG=1
    ports:
      - "8001:8001"
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import socket; s = socket.socket(socket.AF_INET, socket.SOCK_STREAM); s.connect(('localhost', 8001)); s.close()"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  backend-prod:
    profiles:
      - prod
    build:
      context: ./backend
    command: >
      sh -c "python manage.py migrate &&
             gunicorn --bind 0.0.0.0:8001 --workers ${GUNICORN_WORKERS:-4} --timeout ${GUNICORN_TIMEOUT:-120} config.wsgi:application"
    env_file:
      - ./backend/.env.production
    environment:
      - ALLOWED_HOSTS=localhost,127.0.0.1,192.168.0.179,209.38.118.77,ejlogiciel.com
    ports:
      - "8001:8001"
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import socket; s = socket.socket(socket.AF_INET, socket.SOCK_STREAM); s.connect(('localhost', 8001)); s.close()"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  # Frontend services
  frontend:
    profiles:
      - dev
    build:
      context: ./frontend
      target: development
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://backend:8001
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped

  frontend-prod:
    profiles:
      - prod
    build:
      context: ./frontend
      target: production
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://backend-prod:8001
    depends_on:
      backend-prod:
        condition: service_healthy
    restart: unless-stopped

  # Database service
  db:
    profiles:
      - dev
      - prod
    image: postgres:15-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-ejlogiciel}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-root}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-ejlogiciel}"]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - "5432:5432"
    restart: unless-stopped

volumes:
  postgres_data:
  backend_logs:

name: CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build-backend:
    name: Build Backend (Django)
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: ejlogiciel
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: root
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres" --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install pip & poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry
      - name: Install dependencies
        run: |
          cd backend
          poetry install
      - name: Build Docker image
        run: |
          docker build -t backend:ci ./backend

  test-backend:
    name: Test Backend (Django)
    runs-on: ubuntu-latest
    needs: build-backend
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: ejlogiciel
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: root
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres" --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install pip & poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry
      - name: Install dependencies
        run: |
          cd backend
          poetry install
      - name: Run migrations
        run: |
          cd backend
          poetry run python manage.py migrate
      - name: Run backend tests
        run: |
          cd backend
          poetry run python manage.py test

  build-frontend:
    name: Build Frontend (Next.js)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
      - name: Install dependencies
        run: |
          cd frontend
          npm ci
      - name: Build
        run: |
          cd frontend
          npm run build

  test-frontend:
    name: Test Frontend (Next.js)
    runs-on: ubuntu-latest
    needs: build-frontend
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
      - name: Install dependencies
        run: |
          cd frontend
          npm ci
      - name: Lint
        run: |
          cd frontend
          npm run lint
      - name: Run frontend tests
        run: |
          cd frontend
          npm test || true

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Deploy step (à personnaliser)
        run: |
          echo "Déploiement en cours..."
          # Ajoutez ici les commandes de déploiement, par exemple :
          # docker-compose -f docker-compose.prod.yml up -d --build
          # ou toute autre commande nécessaire pour déployer votre application.
          echo "Déploiement terminé."
